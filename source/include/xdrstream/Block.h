  /// \file Block.h
/*
 *
 * Block.h header template automatically generated by a class generator
 * Creation date : lun. janv. 18 2016
 *
 * This file is part of xdrstream libraries.
 * 
 * xdrstream is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrstream is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrstream.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef BLOCK_H
#define BLOCK_H

// -- xdrstream headers
#include "xdrstream/XdrDefinitions.h"

namespace xdrstream
{

class Record;
class IODevice;
class XdrStream;

/**
 *  @brief  Block class
 */
class Block 
{
public:
	/**
	 *  @brief  Constructor with registration in a xdr stream and block name
	 */
	Block(XdrStream *pXdrStream, const std::string &name);

	/**
	 *  @brief Destructor
	 */
	virtual ~Block();

	/**
	 *  @brief  Get the block name
	 */
	const std::string &getName() const;

	/**
	 *  @brief  Get the xdr stream instance in which the block is registered
	 */
	const XdrStream *getXdrStream() const;

protected:
	/**
	 *  @brief  Perform read / write operation
	 */
	virtual bool stream(StreamingMode mode, IODevice *pDevice, xdr_version_t version) = 0;

	/**
	 *  @brief  Get the block version. Written in the device
	 */
	virtual xdr_version_t getVersion() const = 0;

private:
	std::string             m_name;         ///< The block name (must be unique for a xdr stream)
	XdrStream              *m_pXdrStream;   ///< The xdr stream in which the block is registered

	friend class Record;
};

} 

#endif  //  BLOCK_H
