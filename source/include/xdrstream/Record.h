  /// \file Record.h
/*
 *
 * Record.h header template automatically generated by a class generator
 * Creation date : dim. janv. 17 2016
 *
 * This file is part of xdrstream libraries.
 * 
 * xdrstream is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrstream is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrstream.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef RECORD_H
#define RECORD_H

#include "xdrstream/XdrDefinitions.h"

namespace xdrstream
{

/** 
 *  @brief  Record class
 */ 
class Record
{
public:
	/**
	 *  @brief Set whether the record has to be unpacked
	 */
	void setUnpack(bool unpack = true);

	/**
	 *  @brief Whether the record has to be unpacked
	 */
	bool getUnpack() const;

	/**
	 *  @brief  Add a registered block
	 *
	 *  @param  blockName the target block name to connect in this record
	 */
	Status connectBlock(const std::string &blockName);

	/**
	 *  @brief  Remove a block from the record
	 *
	 *  @param  blockName the target block name to remove
	 */
	Status disconnectBlock(const std::string &blockName);

	/**
	 *  @brief  Remove all block from the record
	 */
	Status disconnectAllBlocks();

	/**
	 *  @brief  Get the xdr stream instance in which the record is registered
	 */
	const XdrStream *getXdrStream() const;

	/**
	 *  @brief  Get the record name
	 */
	const std::string &getName() const;

private:
	/**
	 *  @brief  Constructor with xdr stream interface and record name
	 */
	Record(XdrStream *pXdrStream, const std::string &name);

	/**
	 *  @brief  Destructor
	 */
	~Record();

	/**
	 *  @brief  Read record from the device
	 */
	Status readRecord(IODevice *pDevice);

	/**
	 *  @brief  Write record into the device
	 */
	Status writeRecord(IODevice *pDevice);

private:
	BlockMap                         m_blockMap;        ///< The map of block to read/write
	bool                             m_unpack;          ///< Whether the record should be unpacked
	XdrStream                       *m_pXdrStream;      ///< The xdr stream in which the record is registered
	std::string                      m_name;            ///< The record name

	friend class XdrStream;    // for ctor/dtor and read/write access
};

} 

#endif  //  RECORD_H
