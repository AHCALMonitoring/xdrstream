  /// \file PointerMapper.cc
/*
 *
 * PointerMapper.cc source template automatically generated by a class generator
 * Creation date : lun. janv. 18 2016
 *
 * This file is part of xdrstream libraries.
 * 
 * xdrstream is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrstream is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrstream.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "xdrstream/PointerMapper.h"

namespace xdrstream
{

PointerMapper::PointerMapper() 
{
	/* nop */
}

//----------------------------------------------------------------------------------------------------

PointerMapper::~PointerMapper() 
{
	clearMapping();
}

//----------------------------------------------------------------------------------------------------

Status PointerMapper::addPointerTag(void *pOldAddress, void *pNewAddress)
{
	m_pointerTagMap[pOldAddress] = pNewAddress;
	return XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

Status PointerMapper::addPointerReference(void *pOldAddress, void **pDestinationAddress)
{
	m_pointerTagMap.insert(PointerTagMap::value_type(pOldAddress, pDestinationAddress));
	return XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

Status PointerMapper::performPointerMapping()
{
	// loop over references and find the pointer tag.
	// if the pointer tag is not found, then replace by null pointer.
	for(PointerReferenceMap::iterator iter = m_pointerReferenceMap.begin(), endIter = m_pointerReferenceMap.end() ;
			endIter != iter ; ++iter)
	{
		PointerTagMap::iterator tagIter = m_pointerTagMap.find(iter->first);
		bool tagFound = tagIter != m_pointerTagMap.end();

		*iter->second = tagFound ? tagIter->second : 0 ;
	}

	clearMapping();

	return XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

void PointerMapper::clearMapping()
{
	m_pointerReferenceMap.clear();
	m_pointerTagMap.clear();
}

} 

