  /// \file IODevice.cc
/*
 *
 * IODevice.cc source template automatically generated by a class generator
 * Creation date : lun. janv. 18 2016
 *
 * This file is part of xdrstream libraries.
 * 
 * xdrstream is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * xdrstream is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with xdrstream.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "xdrstream/IODevice.h"
#include "xdrstream/PointerMapper.h"

namespace xdrstream
{

IODevice::IODevice()
{
	m_pPointerMapper = new PointerMapper();
}

//----------------------------------------------------------------------------------------------------

IODevice::~IODevice()
{
	delete m_pPointerMapper;
}

//----------------------------------------------------------------------------------------------------

Status IODevice::readAddress(void *&pAddress)
{
	int64_t addr;

	XDR_STREAM( this->read<xdr_addr_t>(&addr) )

	pAddress = reinterpret_cast<void *>(addr);

	return XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

Status IODevice::writeAddress(const void *pAddress)
{
	xdr_addr_t address = reinterpret_cast<xdr_addr_t>(pAddress);
	return this->write<xdr_addr_t>( & address );
}

//----------------------------------------------------------------------------------------------------

Status IODevice::startOfRecord(StreamingMode mode, Record *pRecord)
{
	return XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

Status IODevice::endOfRecord(StreamingMode mode, Record *pRecord)
{
	return XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

Status IODevice::startOfBlock(StreamingMode mode, Block *pBlock)
{
	return XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

Status IODevice::endOfBlock(StreamingMode mode, Block *pBlock)
{
	return XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

Status IODevice::readPointerTag(void *pNewAddress)
{
	void *pOldAddress;

	XDR_STREAM( this->readAddress(pOldAddress) )
	XDR_STREAM( m_pPointerMapper->addPointerTag(pOldAddress, pNewAddress) )

	return XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

Status IODevice::readPointerReference(void **pDestinationAddress)
{
	void *pOldAddress;

	XDR_STREAM( this->readAddress(pOldAddress) )
	XDR_STREAM( m_pPointerMapper->addPointerReference(pOldAddress, pDestinationAddress) )

	return XDR_SUCCESS;
}

//----------------------------------------------------------------------------------------------------

Status IODevice::writePointerTag(const void *pAddress)
{
	return this->writeAddress(pAddress);
}

//----------------------------------------------------------------------------------------------------

Status IODevice::writePointerReference(const void *pAddress)
{
	return this->writeAddress(pAddress);
}

//----------------------------------------------------------------------------------------------------

Status IODevice::performPointerMapping()
{
	return m_pPointerMapper->performPointerMapping();
}

} 

